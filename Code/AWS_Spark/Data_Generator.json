{"paragraphs":[{"text":"import numpy as np\r\nimport pandas as pd\r\nimport random\r\n#import matplotlib.pyplot as plt\r\n#import seaborn as sns\r\nimport string","user":"anonymous","dateUpdated":"2019-03-06T03:58:36+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1551843655797_-171547386","id":"20190306-034055_644740238","dateCreated":"2019-03-06T03:40:55+0000","dateStarted":"2019-03-06T03:58:36+0000","dateFinished":"2019-03-06T03:58:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6791"},{"text":"class DataGenerator:\r\n    def __init__(self, rows = 20, cols_float = 2, cols_int = 2, cols_string = 2, cols_words=3,cols_group=3\r\n                 ,numrange = 12, strrange = 500, draw = False, wordsCount=5, groupsElements=10, groupsWordsCount=2):\r\n        self.rows = rows\r\n        self.cols_float = cols_float\r\n        self.cols_int = cols_int\r\n        self.cols_string = cols_string\r\n        self.cols_words = cols_words\r\n        self.numrange = numrange \r\n        self.strrange = strrange\r\n        self.wordsCount = wordsCount\r\n        self.cols_group = cols_group\r\n        self.groupsWordsCount=groupsWordsCount\r\n        self.groupsElements = groupsElements\r\n        self.draw = draw\r\n        words_file=\"https://computersciencewiki.org/images/1/13/Words_alpha.txt\"\r\n        self.words = pd.read_csv(words_file, sep=\" \", header=None)\r\n        \r\n          \r\n    def generateData(self):\r\n        df = pd.DataFrame()\r\n        random.seed(1)\r\n        \r\n        for i in range(self.cols_float):\r\n            col_name =  'float' + str(i)\r\n            \r\n            seed = random.randint(0,10000) \r\n            df[col_name] = self.lognuniform(use_int = False, seed = seed)\r\n            if self.draw == True:\r\n                self.plot_density(df[col_name])\r\n                     \r\n        for i in range(self.cols_int):\r\n            col_name = 'int' + str(i)\r\n            seed = random.randint(0,10000) \r\n            df[col_name] = self.lognuniform(use_int = True, seed = seed)\r\n            if self.draw == True:\r\n                self.plot_density(df[col_name])\r\n        \r\n        for i in range(self.cols_words):\r\n            col_name = 'words' + str(i)\r\n            df[col_name] = self.randomWords() #(N = n)\r\n        \r\n        for i in range(self.cols_group):\r\n            col_name = 'group' + str(i)\r\n            df[col_name] = self.randomGroups() #(N = n)\r\n        \r\n        for i in range(self.cols_string):\r\n            col_name = 'string' + str(i)\r\n            random.seed(random.randint(0,self.strrange))\r\n            #n = random.randint(0,self.strrange) \r\n            df[col_name] = self.randomString() #(N = n)\r\n        \r\n        return df         \r\n    \r\n    def lognuniform(self, base=np.e, use_int = True, seed = 0):\r\n        np.random.seed(seed) \r\n        # Note: you can not use random.seed here since the np.random.uniform needs np.random.seed not random.seed.\r\n        multiplier = np.random.choice([-1,1], size= self.rows)\r\n        # -5 is used since we done want most of the value to be less than base\r\n        exponentials = np.random.uniform(low = -5, high = self.numrange, size = self.rows)\r\n        #data = np.power(base, np.random.uniform(low = -self.numrange, high = self.numrange, size = self.rows))\r\n        data = np.power(base, exponentials)  * multiplier\r\n        if (use_int == True):\r\n            return data.astype(int)\r\n        if (use_int == False):\r\n            return data\r\n        \r\n    def randomString(self):\r\n        mylist = []\r\n        # Options are Uppercase letters, lowercase letters, spaces (*10)\r\n        options = (string.ascii_letters + string.digits + string.punctuation + ' '*10)\r\n        for i in range(self.rows):\r\n            mystring = ''.join(random.choice(options) for i in range(random.randint(0,self.strrange)))\r\n            mylist.append(mystring)\r\n        return mylist\r\n\r\n    def randomWords(self):\r\n        mylist = []\r\n        for i in range(self.rows):\r\n            mystring = (' '.join(str(self.words.iat[random.randint(0,self.words.shape[0]-1),0]) for i in range(random.randint(1,self.wordsCount)))).strip()\r\n            mylist.append(mystring)\r\n        return mylist\r\n    \r\n    def randomGroups(self):\r\n        groups = []\r\n        for i in range(self.groupsElements):\r\n            mystring = (' '.join(str(self.words.iat[random.randint(0,self.words.shape[0]-1),0]) for i in range(random.randint(1,self.groupsWordsCount)))).strip()\r\n            groups.append(mystring)\r\n        mylist = []\r\n        for i in range(self.rows):\r\n            mystring = groups[random.randint(0,len(groups)-1)]\r\n            mylist.append(mystring)\r\n        return mylist\r\n    \r\n    def plot_density(self, col):\r\n        count, bins, ignored = plt.hist(col, 15, density=True)\r\n        plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\r\n        plt.show()                ","user":"anonymous","dateUpdated":"2019-03-06T04:09:15+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1551843438239_1926907071","id":"20190306-033718_117466127","dateCreated":"2019-03-06T03:37:18+0000","dateStarted":"2019-03-06T04:09:15+0000","dateFinished":"2019-03-06T04:09:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6792"},{"text":"datagen = DataGenerator(rows = 10000, cols_float = 20, cols_int = 20, cols_string = 5, cols_words=5,cols_group=5)\r\ndf = datagen.generateData()\r\ndf.head()\r\ndf.to_csv(\"data_rand.csv\", index=False)\r\n","user":"anonymous","dateUpdated":"2019-03-06T04:13:16+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1551843409454_652073866","id":"20190306-033649_969485055","dateCreated":"2019-03-06T03:36:49+0000","dateStarted":"2019-03-06T04:13:16+0000","dateFinished":"2019-03-06T04:13:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6793"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1551845385286_1372387851","id":"20190306-040945_1682865216","dateCreated":"2019-03-06T04:09:45+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:6794"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1551843586570_-1811224060","id":"20190306-033946_1972508543","dateCreated":"2019-03-06T03:39:46+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:6795"}],"name":"Data_Generator","id":"2E4GCQE9X","noteParams":{},"noteForms":{},"angularObjects":{"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}