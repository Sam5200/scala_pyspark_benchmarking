library(htmltools)
options = params$options
targetVar = params$targetVar
targetUnits = ifelse(targetVar=='Throughput','MB/s','secs')
showOutliers = params$showOutliers
outliersQuantile = ifelse(showOutliers, 1 ,0.90)  #use 1.0 to include all outliers
outliersShape = ifelse(showOutliers,  19,NA)
read.clean.files = function(filename){
file = read.csv(filename, header = FALSE)
column.names = c("Language","Randomize","Dataset","MachineID","RunID","Type","Operation","TimeTaken")
colnames(file) = column.names
return(file)
}
files = list.files(path = "../Results/", pattern = ".csv$", recursive = TRUE, full.names = TRUE) # List all .csv files
#files
databricks.files = files[grepl("Databricks",files)]
local.vm..files = files[grepl("Local_VM",files)]
cluster.files = files[grepl("Cluster",files)]
rows.databricks = lapply(databricks.files, read.csv, header = FALSE) # Read the files into list
merged.databricks = do.call(rbind, rows.databricks) # combine the data.frame
merged.databricks$Setup = 'Databricks'
rows.local.vm = lapply(local.vm..files, read.csv, header = FALSE) # Read the files into list
merged.local.vm = do.call(rbind, rows.local.vm) # combine the data.frame
merged.local.vm$Setup = 'Local VM'
rows.cluster = lapply(cluster.files, read.csv, header = FALSE) # Read the files into list
merged.cluster = do.call(rbind, rows.cluster) # combine the data.frame
merged.cluster$Setup = 'Cluster'
merged_data = rbind(merged.databricks,merged.local.vm,merged.cluster)
merged_data$Setup = as.factor(merged_data$Setup)
column.names = c("Language","Randomize","Dataset","MachineID","RunID","Type","Operation","TimeTaken","Setup")
colnames(merged_data) = column.names
merged_data$Type = as.factor(gsub(pattern = "Operations", replacement = "Operation", x = merged_data$Type))
# Convert columns to factors
merged_data$MachineID = as.factor(merged_data$MachineID)
merged_data$Randomize = as.factor(merged_data$Randomize)
merged_data$RunID = as.factor(merged_data$RunID)
merged_data$Dataset = sub("dataset_", "", merged_data$Dataset)
merged_data$Dataset = sub("MB$", "", merged_data$Dataset)
merged_data$Dataset = as.factor(merged_data$Dataset)
merged_data$Operation = trimws(as.character(merged_data$Operation),'both')
merged_data[merged_data$Operation =='Mathematical Operations on Columns',]$Operation ='Mathematical Operation on Columns'
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DT)
library(htmltools)
options = params$options
targetVar = params$targetVar
targetUnits = ifelse(targetVar=='Throughput','MB/s','secs')
showOutliers = params$showOutliers
outliersQuantile = ifelse(showOutliers, 1 ,0.90)  #use 1.0 to include all outliers
outliersShape = ifelse(showOutliers,  19,NA)
read.clean.files = function(filename){
file = read.csv(filename, header = FALSE)
column.names = c("Language","Randomize","Dataset","MachineID","RunID","Type","Operation","TimeTaken")
colnames(file) = column.names
return(file)
}
files = list.files(path = "../Results/", pattern = ".csv$", recursive = TRUE, full.names = TRUE) # List all .csv files
#files
databricks.files = files[grepl("Databricks",files)]
local.vm..files = files[grepl("Local_VM",files)]
cluster.files = files[grepl("Cluster",files)]
rows.databricks = lapply(databricks.files, read.csv, header = FALSE) # Read the files into list
merged.databricks = do.call(rbind, rows.databricks) # combine the data.frame
merged.databricks$Setup = 'Databricks'
rows.local.vm = lapply(local.vm..files, read.csv, header = FALSE) # Read the files into list
merged.local.vm = do.call(rbind, rows.local.vm) # combine the data.frame
merged.local.vm$Setup = 'Local VM'
rows.cluster = lapply(cluster.files, read.csv, header = FALSE) # Read the files into list
merged.cluster = do.call(rbind, rows.cluster) # combine the data.frame
merged.cluster$Setup = 'Cluster'
merged_data = rbind(merged.databricks,merged.local.vm,merged.cluster)
merged_data$Setup = as.factor(merged_data$Setup)
column.names = c("Language","Randomize","Dataset","MachineID","RunID","Type","Operation","TimeTaken","Setup")
colnames(merged_data) = column.names
merged_data$Type = as.factor(gsub(pattern = "Operations", replacement = "Operation", x = merged_data$Type))
# Convert columns to factors
merged_data$MachineID = as.factor(merged_data$MachineID)
merged_data$Randomize = as.factor(merged_data$Randomize)
merged_data$RunID = as.factor(merged_data$RunID)
merged_data$Dataset = sub("dataset_", "", merged_data$Dataset)
merged_data$Dataset = sub("MB$", "", merged_data$Dataset)
merged_data$Dataset = as.factor(merged_data$Dataset)
merged_data$Operation = trimws(as.character(merged_data$Operation),'both')
merged_data[merged_data$Operation =='Mathematical Operations on Columns',]$Operation ='Mathematical Operation on Columns'
size_10MB =  11.4789848327637 # file.size("../../Data/Databricks/machine2/dataset_10MB.csv")/(1024*1024)
size_100MB = 115.640992164612 # file.size("../../Data/Databricks/machine2/dataset_100MB.csv")/(1024*1024)
size_200MB = 229.8573
size_300MB = 343.2709
size_500MB = 576.678165435791 # file.size("../../Data/Databricks/machine2/dataset_500MB.csv")/(1024*1024)
print(paste("Actual Size of 10MB file (in MB)",size_10MB))
print(paste("Actual Size of 100MB file (in MB)",size_100MB))
print(paste("Actual Size of 200MB file (in MB)",size_200MB))
print(paste("Actual Size of 300MB file (in MB)",size_300MB))
print(paste("Actual Size of 500MB file (in MB)",size_500MB))
size_info = data.frame(Dataset = c("10","100","200","300","500")
,Size = c(size_10MB,size_100MB,size_200MB,size_300MB,size_500MB))
str(size_info)
merged_data = merged_data %>%
merge(size_info,by='Dataset') %>%
mutate(Throughput = Size/TimeTaken)
Setups = c(unique(as.character(merged_data$Setup)))
data_raw = merged_data
merged_data = merged_data %>%
filter(RunID != 1)
str(merged_data)
head(merged_data)
summary(merged_data)
summarize_results = function(grouped_data){
rv = grouped_data %>%
summarise(n = n()
,Mean_Time = round(mean(TimeTaken),2)
,Std_Dev_Time= round(sd(TimeTaken),2)
,Coeff_Var_Time = round(Mean_Time/Std_Dev_Time,2)
,Mean_Throughput = round(mean(Throughput),2)
,Std_Dev_Throughput= round(sd(Throughput),2)
,Coeff_Var_Throughput = round(Mean_Throughput/Std_Dev_Throughput,2)
)
return(rv)
}
plot_hist = function(grouped_data, by_var){
indices = grouped_data %>%
dplyr::group_indices() %>%
as.factor()
grouped_data$Index = as.factor(indices)
facet_form = as.formula(paste( "~" , paste(grouped_data %>% dplyr::group_vars(), collapse = " + "), sep = ""))
print(ggplot(grouped_data, aes_string(x = "Index", y = "TimeTaken", fill=by_var)) +
geom_boxplot() +
facet_wrap(facet_form  , scales = 'free',ncol=4, labeller = label_both))
return(grouped_data)
}
ggplot_colors = function(plot,strip_angle=0,...){
plot +
scale_color_manual(values=c("#ca0020","#0571b0"),breaks=c('PySpark','Scala'))+
scale_fill_manual(values=c("#f4a582","#92c5de"),breaks=c('PySpark','Scala'))+
theme_light() +
ggplot2::theme(strip.text.y=element_text(angle=strip_angle)
,...)
}
form=as.formula(paste0(targetVar,' ~ Dataset + Language  + Operation + Setup'))
model = lm(data=merged_data,formula=form)
summary(model)
filtered= merged_data
p=ggplot(data=filtered, aes_string(x='Setup',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape = outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits)) +
facet_wrap(~Type,scales='free')
ggplot_colors(p,axis.text.y=element_text(size=7),legend.position='right')
plotDataSize=function(filtered,title){
t = filtered
p=ggplot(data=t, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits)) +
facet_wrap(~Type ,labeller=label_wrap_gen(width=100),scales='free_x')  +
ggplot2::ggtitle(title)
ggplot_colors(p,strip_angle=0
,axis.text.y=element_text(size=7)
,axis.text.x=element_text(size=9))
}
filtered= merged_data
plotDataSize(filtered,'Comparing Datsets - All Environments')
for (s in Setups) {
message(s)
filtered= merged_data %>% filter(Setup==s)
plot(plotDataSize(filtered,paste0('Comparing Datsets - ',s)))
}
filtered= merged_data
p=ggplot(data=filtered, aes_string(x='Setup',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape = outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits)) +
facet_wrap(~Type,scales='free')
ggplot_colors(p,axis.text.y=element_text(size=7),legend.position='right')
filtered=merged_data
filtered$Type = forcats::fct_reorder(filtered$Type,filtered[[targetVar]],.fun=median,.desc=F)
p=ggplot(data=filtered, aes_string(x='Type',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape)   +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits)) +
facet_wrap(~Setup) +
ggplot2::coord_flip()
ggplot_colors(p,axis.text.x=element_text(size=8)
,panel.spacing.x=unit(10,'points')
,legend.position='bottom')
#functions
plot_get_significant = function(filtered){
w<-function(oper){wilcox.test(as.formula(paste0(targetVar,' ~ Language ')),alternative='two.sided'
,filtered,subset = Operation == oper)$p.value}
ops = unique(filtered$Operation)
test=sapply(ops,w)
keep= ops[which(test < 0.025)]
data2 = filtered[filtered$Operation %in% keep,]
if(nrow(data2)==0) {print("No Significant Elements") ; return()}
return(data2)
}
plot_operations_get = function(filtered,title=''){
if(is.null(filtered)) return()
plotData = filtered %>%
mutate(Operation = factor(Operation))
p=  ggplot(data=plotData, aes_string(x='Dataset',y=targetVar,color='Language',shape='Setup')) +
ggplot2::stat_summary(aes(group=Language),fun.y=median,geom='line',size=.5 )+
geom_jitter(alpha=0.5,size=.5,width=0.1)+
scale_y_continuous(labels=scales::comma_format(accuracy=1,suffix=targetUnits)) +
facet_wrap(~Operation,scales='free',ncol=4,labeller = label_wrap_gen()) +
ggplot2::ggtitle(title)
ggplot_colors(p,legend.position = 'bottom'
,axis.text.x=element_text(size=8,angle=45,hjust=1)
,axis.text.y=element_text(size=8)
)
}
plot_operations = function(filtered,title){
list(All= plot_operations_get(filtered
,title=paste0(title,' - All Operations'))
,Significant = plot_operations_get(plot_get_significant(filtered)
,title=paste0(title,' - Only Significant Operations'))
)
}
filtered=merged_data %>% filter(Type=='Row Operation')
plot_operations(filtered,title='Comparing Queries - Combined Environments')
for(s in Setups){
plot_operations(filter(filtered,Setup==s),title=paste0('Comparing Queries - ',s)  )
}
filtered=merged_data %>% filter(Type=='Row Operation')
plot_operations(filtered,title='Comparing Queries - Combined Environments')
for(s in Setups){
plot(plot_operations(filter(filtered,Setup==s),title=paste0('Comparing Queries - ',s)  ))
}
Setups
s=Setups[1]
plot(plot_operations(filter(filtered,Setup==s),title=paste0('Comparing Queries - ',s)))
.data=filter(filtered,Setup==s)
title=paste0('Comparing Queries - ',s)
plot_operations_get(filtered
,title=paste0(title,' - All Operations')
)
plot_operations_get(plot_get_significant(filtered)
,title=paste0(title,' - Only Significant Operations'))
t=plot_operations(.data=filter(filtered,Setup==s),title=paste0('Comparing Queries - ',s))
t=plot_operations(filtered=filter(filtered,Setup==s),title=paste0('Comparing Queries - ',s))
lapply(t,plot)
t=plot_operations(filtered=filter(filtered,Setup==s),title=paste0('Comparing Queries - ',s))
lapply(t,plot)
filtered=merged_data %>% filter(Type=='Row Operation')
plot_operations(filtered,title='Comparing Queries - Combined Environments')
for(s in Setups){
t=plot_operations(filtered=filter(filtered,Setup==s),title=paste0('Comparing Queries - ',s))
t$All
t$Significant
}
filtered=merged_data %>% filter(Type=='Row Operation')
plot_operations(filtered,title='Comparing Queries - Combined Environments')
for(s in Setups){
t=plot_operations(filtered=filter(filtered,Setup==s),title=paste0('Comparing Queries - ',s))
plot(t$All)
plot(t$Significant)
}
title = 'Comparing Columns Operations'
filtered=merged_data %>% filter(Type=='Column Operation'
,! Operation %in%  c('Full Outer Join 3 Columns'
,'Left Outer Join 3 Columns'
,'Inner Join 3 Columns')
)
plot_operations(filtered,title=paste0(title,' - Combined Environments'))
for(s in Setups){
t=plot_operations(filtered=filter(filtered,Setup==s),title=paste0(title,' - ',s))
plot(t$All)
plot(t$Significant)
}
title = 'Comparing Aggregate Operations'
filtered=merged_data %>% filter(Type=='Aggregate Operation')
plot_operations(filtered,title=paste0(title,' - Combined Environments'))
for(s in Setups){
t=plot_operations(filtered=filter(filtered,Setup==s),title=paste0(title,' - ',s))
plot(t$All)
plot(t$Significant)
}
title = 'Comparing Mixed Operations'
filtered=merged_data %>% filter(Type=='Mixed Operation')
plot_operations(filtered,title=paste0(title,' - Combined Environments'))
for(s in Setups){
t=plot_operations(filtered=filter(filtered,Setup==s),title=paste0(title,' - ',s))
plot(t$All)
plot(t$Significant)
}
title = 'Comparing Mixed Operations'
filtered=merged_data %>% filter(Type=='Mixed Operation')
plot_operations(filtered,title=paste0(title,' - Combined Environments'))
for(s in Setups){
t=plot_operations(filtered=filter(filtered,Setup==s),title=paste0(title,' - ',s))
plot(t$All)
plot(t$Significant)
}
t=plot_operations(filtered=filter(filtered,Setup==s),title=paste0(title,' - ',s))
s
t$All
t$Significant
plot(t$Significant)
ggplot2::FacetNull
plot(ggplot2::FacetNull)
plot(NA)
plot(geom_blank())
plot(ggplot(mtcars, aes(x = wt, y = mpg)) + geom_blank())
ggplot(data=plotData)+geom_blank()
ggplot(data=mtcars)+geom_blank()
#functions
plot_get_significant = function(filtered){
w<-function(oper){wilcox.test(as.formula(paste0(targetVar,' ~ Language ')),alternative='two.sided'
,filtered,subset = Operation == oper)$p.value}
ops = unique(filtered$Operation)
test=sapply(ops,w)
keep= ops[which(test < 0.025)]
data2 = filtered[filtered$Operation %in% keep,]
if(nrow(data2)==0) {print("No Significant Elements") ; return()}
return(data2)
}
plot_operations_get = function(filtered,title=''){
if(is.null(filtered)) return(ggplot(data=plotData)+geom_blank())
plotData = filtered %>%
mutate(Operation = factor(Operation))
p=  ggplot(data=plotData, aes_string(x='Dataset',y=targetVar,color='Language',shape='Setup')) +
ggplot2::stat_summary(aes(group=Language),fun.y=median,geom='line',size=.5 )+
geom_jitter(alpha=0.5,size=.5,width=0.1)+
scale_y_continuous(labels=scales::comma_format(accuracy=1,suffix=targetUnits)) +
facet_wrap(~Operation,scales='free',ncol=4,labeller = label_wrap_gen()) +
ggplot2::ggtitle(title)
ggplot_colors(p,legend.position = 'bottom'
,axis.text.x=element_text(size=8,angle=45,hjust=1)
,axis.text.y=element_text(size=8)
)
}
plot_operations = function(filtered,title){
list(All= plot_operations_get(filtered
,title=paste0(title,' - All Operations'))
,Significant = plot_operations_get(plot_get_significant(filtered)
,title=paste0(title,' - Only Significant Operations'))
)
}
title = 'Comparing Mixed Operations'
filtered=merged_data %>% filter(Type=='Mixed Operation')
plot_operations(filtered,title=paste0(title,' - Combined Environments'))
#functions
plot_get_significant = function(filtered){
w<-function(oper){wilcox.test(as.formula(paste0(targetVar,' ~ Language ')),alternative='two.sided'
,filtered,subset = Operation == oper)$p.value}
ops = unique(filtered$Operation)
test=sapply(ops,w)
keep= ops[which(test < 0.025)]
data2 = filtered[filtered$Operation %in% keep,]
if(nrow(data2)==0) {print("No Significant Elements") ; return()}
return(data2)
}
plot_operations_get = function(filtered,title=''){
if(is.null(filtered)) return(ggplot(data=filteres)+geom_blank())
plotData = filtered %>%
mutate(Operation = factor(Operation))
p=  ggplot(data=plotData, aes_string(x='Dataset',y=targetVar,color='Language',shape='Setup')) +
ggplot2::stat_summary(aes(group=Language),fun.y=median,geom='line',size=.5 )+
geom_jitter(alpha=0.5,size=.5,width=0.1)+
scale_y_continuous(labels=scales::comma_format(accuracy=1,suffix=targetUnits)) +
facet_wrap(~Operation,scales='free',ncol=4,labeller = label_wrap_gen()) +
ggplot2::ggtitle(title)
ggplot_colors(p,legend.position = 'bottom'
,axis.text.x=element_text(size=8,angle=45,hjust=1)
,axis.text.y=element_text(size=8)
)
}
plot_operations = function(filtered,title){
list(All= plot_operations_get(filtered
,title=paste0(title,' - All Operations'))
,Significant = plot_operations_get(plot_get_significant(filtered)
,title=paste0(title,' - Only Significant Operations'))
)
}
title = 'Comparing Mixed Operations'
filtered=merged_data %>% filter(Type=='Mixed Operation')
plot_operations(filtered,title=paste0(title,' - Combined Environments'))
#functions
plot_get_significant = function(filtered){
w<-function(oper){wilcox.test(as.formula(paste0(targetVar,' ~ Language ')),alternative='two.sided'
,filtered,subset = Operation == oper)$p.value}
ops = unique(filtered$Operation)
test=sapply(ops,w)
keep= ops[which(test < 0.025)]
data2 = filtered[filtered$Operation %in% keep,]
if(nrow(data2)==0) {print("No Significant Elements") ; return()}
return(data2)
}
plot_operations_get = function(filtered,title=''){
if(is.null(filtered)) return(ggplot(data=filtered)+geom_blank())
plotData = filtered %>%
mutate(Operation = factor(Operation))
p=  ggplot(data=plotData, aes_string(x='Dataset',y=targetVar,color='Language',shape='Setup')) +
ggplot2::stat_summary(aes(group=Language),fun.y=median,geom='line',size=.5 )+
geom_jitter(alpha=0.5,size=.5,width=0.1)+
scale_y_continuous(labels=scales::comma_format(accuracy=1,suffix=targetUnits)) +
facet_wrap(~Operation,scales='free',ncol=4,labeller = label_wrap_gen()) +
ggplot2::ggtitle(title)
ggplot_colors(p,legend.position = 'bottom'
,axis.text.x=element_text(size=8,angle=45,hjust=1)
,axis.text.y=element_text(size=8)
)
}
plot_operations = function(filtered,title){
list(All= plot_operations_get(filtered
,title=paste0(title,' - All Operations'))
,Significant = plot_operations_get(plot_get_significant(filtered)
,title=paste0(title,' - Only Significant Operations'))
)
}
title = 'Comparing Mixed Operations'
filtered=merged_data %>% filter(Type=='Mixed Operation')
plot_operations(filtered,title=paste0(title,' - Combined Environments'))
for(s in Setups){
t=plot_operations(filtered=filter(filtered,Setup==s),title=paste0(title,' - ',s))
plot(t$All)
plot(t$Significant)
}
filtered=data_raw
filtered$Operation = forcats::fct_reorder(filtered$RunID,filtered[[targetVar]],.fun=median,desc=F)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))
ggplot_colors(p)
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))  +
filtered=data_raw
filtered$Operation = forcats::fct_reorder(filtered$RunID,filtered[[targetVar]],.fun=median,desc=F)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))
ggplot_colors(p)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))  +
facet_grid(~Setup)
ggplot_colors(p)
filtered=data_raw
filtered$Operation = forcats::fct_reorder(filtered$RunID,filtered[[targetVar]],.fun=median,desc=F)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))
ggplot_colors(p)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))  +
facet_grid(Setup~)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))  +
facet_grid(~Setup,ncol=1)
ggplot_colors(p)
filtered=data_raw
filtered$Operation = forcats::fct_reorder(filtered$RunID,filtered[[targetVar]],.fun=median,desc=F)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))
ggplot_colors(p)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))  +
facet_grid(~Setup,cols=1)
filtered=data_raw
filtered$Operation = forcats::fct_reorder(filtered$RunID,filtered[[targetVar]],.fun=median,desc=F)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))
ggplot_colors(p)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))  +
facet_wrap(~Setup,cols=1)
filtered=data_raw
filtered$Operation = forcats::fct_reorder(filtered$RunID,filtered[[targetVar]],.fun=median,desc=F)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))
ggplot_colors(p)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))  +
facet_wrap(~Setup,ncol=1)
ggplot_colors(p)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))  +
facet_wrap(~Setup,ncol=1)
ggplot_colors(p)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))  +
facte_grid(Language~Setup)
p=ggplot(data=filtered, aes_string(x='RunID',y=targetVar,fill='Language',color='Language')) +
geom_boxplot(outlier.size = 0.5,size=0.5,alpha=0.6,outlier.shape = outliersShape)  +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))
,labels=scales::comma_format(accuracy=1,suffix=targetUnits))  +
facet_grid(Language~Setup)
ggplot_colors(p)
