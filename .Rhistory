keep=  names(modelS$coefficients[,4])[modelS$coefficients[,4]<0.05]
keep
names(which(sapply(oper,function(x){any(grepl(x,keep))})))
oper
grepl(oper[2],keep)
any(grepl(oper[2],keep))
sapply(oper[2],function(x){any(grepl(x,keep))})
sapply(oper,function(x){any(grepl(x,keep))})
which(sapply(oper,function(x){any(grepl(x,keep))}))
oper[which(sapply(oper,function(x){any(grepl(x,keep))})))]
oper[which(sapply(oper,function(x){any(grepl(x,keep))}))]
#find which operation is isgnificant in the interactive terms
keep=  names(modelS$coefficients[,4])[modelS$coefficients[,4]<0.05]
keep
keep=oper[which(sapply(oper,function(x){any(grepl(x,keep,fixed=T))}))] #this does a grepl fo each operation in the significant variables
keep
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DT)
library(htmltools)
options = params$options
targetVar = params$targetVar
showOutliers = params$showOutliers
outliersQuantile = ifelse(showOutliers, 1 ,0.90)  #use 1.0 to include all outliers
outliersShape = ifelse(showOutliers,  19,NA)
read.clean.files = function(filename){
file = read.csv(filename, header = FALSE)
column.names = c("Language","Randomize","Dataset","MachineID","RunID","Type","Operation","TimeTaken")
colnames(file) = column.names
return(file)
}
files = list.files(path = "../Results/", pattern = ".csv$", recursive = TRUE, full.names = TRUE) # List all .csv files
#files
databricks.files = files[grepl("Databricks",files)]
local.vm..files = files[grepl("Local_VM",files)]
rows.databricks = lapply(databricks.files, read.csv, header = FALSE) # Read the files into list
merged.databricks = do.call(rbind, rows.databricks) # combine the data.frame
merged.databricks$Setup = 'Databricks'
rows.local.vm = lapply(local.vm..files, read.csv, header = FALSE) # Read the files into list
merged.local.vm = do.call(rbind, rows.local.vm) # combine the data.frame
merged.local.vm$Setup = 'Local VM'
merged_data = rbind(merged.databricks,merged.local.vm)
merged_data$Setup = as.factor(merged_data$Setup)
column.names = c("Language","Randomize","Dataset","MachineID","RunID","Type","Operation","TimeTaken","Setup")
colnames(merged_data) = column.names
merged_data$Type = as.factor(gsub(pattern = "Operations", replacement = "Operation", x = merged_data$Type))
# Convert columns to factors
merged_data$MachineID = as.factor(merged_data$MachineID)
merged_data$Randomize = as.factor(merged_data$Randomize)
merged_data$RunID = as.factor(merged_data$RunID)
merged_data$Dataset = sub("dataset_", "", merged_data$Dataset)
merged_data$Dataset = sub("MB$", "", merged_data$Dataset)
merged_data$Dataset = as.factor(merged_data$Dataset)
merged_data$Operation = trimws(as.character(merged_data$Operation),'both')
merged_data[merged_data$Operation =='Mathematical Operations on Columns',]$Operation ='Mathematical Operation on Columns'
size_10MB =  11.4789848327637 # file.size("../../Data/Databricks/machine2/dataset_10MB.csv")/(1024*1024)
size_100MB = 115.640992164612 # file.size("../../Data/Databricks/machine2/dataset_100MB.csv")/(1024*1024)
size_200MB = 229.8573
size_300MB = 343.2709
size_500MB = 576.678165435791 # file.size("../../Data/Databricks/machine2/dataset_500MB.csv")/(1024*1024)
print(paste("Actual Size of 10MB file (in MB)",size_10MB))
print(paste("Actual Size of 100MB file (in MB)",size_100MB))
print(paste("Actual Size of 200MB file (in MB)",size_200MB))
print(paste("Actual Size of 300MB file (in MB)",size_300MB))
print(paste("Actual Size of 500MB file (in MB)",size_500MB))
size_info = data.frame(Dataset = c("10","100","200","300","500")
,Size = c(size_10MB,size_100MB,size_200MB,size_300MB,size_500MB))
str(size_info)
merged_data = merged_data %>%
merge(size_info,by='Dataset') %>%
mutate(Throughput = Size/TimeTaken)
data_raw = merged_data
merged_data = merged_data %>%
filter(RunID != 1)
str(merged_data)
head(merged_data)
summary(merged_data)
summarize_results = function(grouped_data){
rv = grouped_data %>%
summarise(n = n()
,Mean_Time = round(mean(TimeTaken),2)
,Std_Dev_Time= round(sd(TimeTaken),2)
,Coeff_Var_Time = round(Mean_Time/Std_Dev_Time,2)
,Mean_Throughput = round(mean(Throughput),2)
,Std_Dev_Throughput= round(sd(Throughput),2)
,Coeff_Var_Throughput = round(Mean_Throughput/Std_Dev_Throughput,2)
)
return(rv)
}
plot_hist = function(grouped_data, by_var){
indices = grouped_data %>%
dplyr::group_indices() %>%
as.factor()
grouped_data$Index = as.factor(indices)
facet_form = as.formula(paste( "~" , paste(grouped_data %>% dplyr::group_vars(), collapse = " + "), sep = ""))
print(ggplot(grouped_data, aes_string(x = "Index", y = "TimeTaken", fill=by_var)) +
geom_boxplot() +
#facet_wrap(Index ~ .  , scales = 'free',ncol=4, labeller = label_both))
facet_wrap(facet_form  , scales = 'free',ncol=4, labeller = label_both))
return(grouped_data)
}
databricks_vs_localVM = function(arData) {
result = arData %>%
group_by(Type, Operation, Language, MachineID, Dataset, Setup) %>%
summarize_results()
group = arData %>%
group_by(Type, Operation, Language, MachineID, Dataset)
plot_hist(grouped_data = group, by_var = "Setup")
return (result)
}
PySpark_vs_Scala = function(arData, arOpt=2) {
# 1 will only return table
# 2 will only plot histograms
# 0 will do both
result = NA
if (arOpt == 1 | arOpt == 0){
result = arData %>%
group_by(Type, Operation, Dataset, MachineID, Setup, Language) %>%
summarize_results()
}
if (arOpt == 2 | arOpt == 0){
group = arData %>%
group_by(Type, Operation, Dataset, MachineID, Setup)
plot_hist(grouped_data = group, by_var = "Language")
}
return (result)
}
ggplot_colors = function(plot,strip_angle=0,...){
plot +
scale_color_manual(values=c("#ca0020","#0571b0"),breaks=c('PySpark','Scala'))+
scale_fill_manual(values=c("#f4a582","#92c5de"),breaks=c('PySpark','Scala'))+
theme_light() +
ggplot2::theme(strip.text.y=element_text(angle=strip_angle)
,...)
}
form=as.formula(paste0(targetVar,' ~ Dataset + Language  + Operation + Setup'))
model = lm(data=merged_data,formula=form)
summary(model)
filtered= merged_data
p=ggplot(data=filtered, aes_string(x='Setup',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape = outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
facet_wrap(~Type,scales='free')
ggplot_colors(p)
filtered= merged_data
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
facet_grid(Type~Setup,scales='free',switch='y')
ggplot_colors(p,strip_angle=180)
filtered=merged_data
filtered$Type = forcats::fct_reorder(filtered$Type,filtered[[targetVar]],.fun=median,desc=F)
p=ggplot(data=filtered, aes_string(x='Type',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape)   +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
facet_wrap(~Setup) +
#ggplot2::coord_cartesian(xlim=c(0,max(filtered[[targetVar]])*.5))+
ggplot2::coord_flip()
#facet_grid(Setup~Type)
ggplot_colors(p)
#functions
plot_operations = function(filtered,onlySignificant = T){
filtered$Operation = forcats::fct_reorder(filtered$Operation,filtered[[targetVar]],.fun=median,desc=F)
if(onlySignificant) {
browser()
#find which operation is isgnificant in the interactive terms
form=as.formula(paste0(targetVar,' ~ Dataset*Operation*Language ')) #we need fukk interaction,
model = lm(data=filtered, formula=form)
modelS=summary(model)
keep=  names(modelS$coefficients[,4])[modelS$coefficients[,4]<0.05]
oper = unique(filtered$Operation)
keep=oper[which(sapply(oper,function(x){any(grepl(x,keep,fixed=T))}))] #this does a grepl fo each operation in the significant variables
data2 = filtered[filtered$Operation %in% keep,]
print("Only Significant Elements")
if(nrow(data2)==0) {print("No Significant Elements") ; return()}
} else {
print("All Elements")
data2=filtered
}
p=  ggplot(data=data2, aes_string(x='Dataset',y=targetVar,color='Language')) +
ggplot2::stat_summary(aes(group=Language),fun.y=median,geom='line',size=.5 )+
#ggplot2::stat_summary(aes(group=Language),fun.y=median,geom='point',size=.5 )+
geom_jitter(alpha=0.5,size=.5,width=0.1)+
#scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#geom_boxplot(outlier.size = 0.1,size=0.1) +
#ggplot2::coord_flip() +
facet_wrap(~Operation,scales='free',ncol=4,labeller = label_wrap_gen())
#facet_grid(Operation~Setup,scales='free')
ggplot_colors(p,legend.position = 'bottom')
}
plot_operations(filtered,T)
filtered
wilcox.test(select_at(filtered,c(targetvar,'Dataset','Operation','Language')))
wilcox.test(select_at(filtered,c(targetvar,'Dataset','Operation','Language')))
wilcox.test(select_at(filtered,c(targetVar,'Dataset','Operation','Language')))
filtered
head(filtered)
View(filterd)
View(filtered)
test$target = test[[targetVar]]
#find which operation is isgnificant in the interactive terms
test=filtered
test$target = test[[targetVar]]
test$target
form=as.formula(paste0(targetVar,' ~ Dataset*Operation*Language ')) #we need fukk interaction,
wilcox.test(form,filtered)
form
wilcox.test(Throughput ~ Dataset + Operation + Language ,filtered)
wilcox.test(Throughput ~ Dataset ,filtered)
wilcox.test(Throughput ~ Dataset+Operation ,filtered)
wilcox.test(Throughput ~ Dataset,filtered)
wilcox.test(Throughput ~ Langauge ,filtered)
wilcox.test(Throughput ~ Language ,filtered)
wilcox.test(Throughput ~ Language ,filtered,subset = Operation)
filtered$Operation
wilcox.test(Throughput ~ Language ,filtered,subset = Operation=='Left Outer Join 5 Columns')
wilcox.test(Throughput ~ Language ,filtered,subset = Operation=='Left Outer Join 5 Columns')
wilcox.test(Throughput ~ Language ,filtered,subset = Operation=='Filter Reg Ex 2')
lapply(unique(filtered$Operation),function(x){
wilcox.test(Throughput ~ Language ,filtered,subset = Operation==x)
})
wilcox.test(Throughput ~ Language ,filtered,subset = Operation=='Filter Reg Ex 2')
t=wilcox.test(Throughput ~ Language ,filtered,subset = Operation=='Filter Reg Ex 2')
t$p.value
lapply(unique(filtered$Operation),function(x){
wilcox.test(Throughput ~ Language ,filtered,subset = Operation==x)$p.value
})
sapply(unique(filtered$Operation),function(x){
wilcox.test(Throughput ~ Language ,filtered,subset = Operation==x)$p.value
})
form=as.formula(paste0(targetVar,' ~ Language ')) #we need fukk interaction,
test=sapply(unique(filtered$Operation),function(x){
wilcox.test(form ,filtered,subset = Operation==x)$p.value
})
form=as.formula(paste0(targetVar,' ~ Language ')) #we need fukk interaction,
test=sapply(unique(filtered$Operation),function(x){
wilcox.test(form ,filtered,subset = Operation==x)$p.value
})
test=sapply(unique(filtered$Operation),function(x){
wilcox.test(Throughput ~ Language ,filtered,subset = Operation==x)$p.value
})
form
test=sapply(unique(filtered$Operation),function(x,form){
wilcox.test(form ,filtered,subset = Operation==x)$p.value
})
test=sapply(unique(filtered$Operation),function(x,form=form){
wilcox.test(form ,filtered,subset = Operation==x)$p.value
})
form=as.formula(paste0(targetVar,' ~ Language ')) #we need fukk interaction,
test=sapply(unique(filtered$Operation),function(x,y=form){
wilcox.test(y,filtered,subset = Operation==x)$p.value
})
form=as.formula(paste0(targetVar,' ~ Language ')) #we need fukk interaction,
test=sapply(unique(filtered$Operation),function(x){
wilcox.test(y,filtered,subset = Operation==x)$p.value
})
test=sapply(unique(filtered$Operation),form=form,function(x,form){
wilcox.test(form,filtered,subset = Operation==x)$p.value
})
test=sapply(unique(filtered$Operation),form,function(x,form){
wilcox.test(form,filtered,subset = Operation==x)$p.value
})
test=sapply(unique(filtered$Operation),function(x,form){
wilcox.test(form,filtered,subset = Operation==x)$p.value
},form=form)
form=as.formula(paste0(targetVar,' ~ Language ')) #we need fukk interaction,
test=sapply(unique(filtered$Operation),function(x,form){
wilcox.test(form,filtered,subset = Operation==x)$p.value
},form=form)
w=function(x,form){wilcox.test(form,filtered,subset = Operation==x)$p.value}
test=sapply(unique(filtered$Operation),w,form=form)
test=mapply(w,unique(filtered$Operation),form=form)
w=function(x,form){wilcox.test(form,filtered,subset = Operation==x)$p.value}
w
w('Filter Reg Ex 2',form)
w('Filter Reg Ex 2',form)
wilcox.test(form,filtered,subset = Operation=='Filter Reg Ex 2')
x='Filter Reg Ex 2'
wilcox.test(form,filtered,subset = Operation==x)
w=function(x,form){print(x);wilcox.test(form,filtered,subset = Operation==x)$p.value}
w('Filter Reg Ex 2',form)
w('Filter Reg Ex 2',form)
w('Filter Reg Ex 1',form)
w=function(oper,form){print(x);wilcox.test(form,filtered,subset = Operation==oper)$p.value}
w('Filter Reg Ex 1',form)
w<-function(oper,form){print(x);wilcox.test(form,filtered,subset = Operation==oper)$p.value}
w('Filter Reg Ex 1',form)
w('Filter Reg Ex 1',form)
w<-function(oper,form){print(x);wilcox.test(form,filtered,subset = Operation %in% oper)$p.value}
w('Filter Reg Ex 1',form)
w('Filter Reg Ex 2',form)
w<-function(oper,form){print(oper);wilcox.test(form,filtered,subset = Operation %in% oper)$p.value}
w('Filter Reg Ex 2',form)
w('Filter Reg Ex 4',form)
unique(filtered$Operation)
w('Running Sum',form)
form
unique(filtered$Operation)
ilcox.test(form,filtered,subset = Operation == 'Running Sum')$p.value
wilcox.test(form,filtered,subset = Operation == 'Running Sum')$p.value
wilcox.test(form,filtered,subset = Operation == 'Running Srum')$p.value
wilcox.test(form,filtered,subset = Operation %in% 'Running Sum')$p.value
wilcox.test(form,filtered,subset = Operation %in% x)$p.value
wilcox.test(form,filtered,subset = Operation %in% x2)$p.value
wilcox.test(form,filtered,subset = Operation %in% eval(x))$p.value
w<-function(oper,form){print(oper);wilcox.test(form,filtered,subset = Operation %in% eval(oper))$p.value}
w('Running Sum',form)
w('Running Seum',form)
form
w2<-function(oper){print(oper);wilcox.test(Throughput ~ Language,filtered,subset = Operation == oper)$p.value}
w2('Running Sum')
w2('Running Surm')
w2('Running Sum')
w2<-function(oper){print(oper);wilcox.test(form,filtered,subset = Operation == oper)$p.value}
w2<-function(oper){print(oper);wilcox.test(form,filtered,subset = Operation == oper)$p.value}
w2('Running Sum')
w2('Running Surm')
form
View(filtered)
w2<-function(oper){print(oper);wilcox.test(Throughput ~ Language,filtered,subset = Operation == oper)$p.value}
w2('Running Sum')
w2<-function(oper){print(oper);wilcox.test(as.formula(paste0(targetVar,' ~ Language ')),filtered,subset = Operation == oper)$p.value}
w2('Running Sum')
w2('Running Sumr')
w<-function(oper){wilcox.test(as.formula(paste0(targetVar,' ~ Language '))
,filtered,subset = Operation == oper)$p.value
}
test=sapply(unique(filtered$Operation),w)
test
which(test < 0.05)
test=sapply(unique(filtered$Operation),w)
which(test < 0.05)
test
name(which(test < 0.05))
names(which(test < 0.05))
keep= names(which(test < 0.05))
data2 = filtered[filtered$Operation %in% keep,]
#functions
plot_operations = function(filtered,onlySignificant = T){
filtered$Operation = forcats::fct_reorder(filtered$Operation,filtered[[targetVar]],.fun=median,desc=F)
if(onlySignificant) {
w<-function(oper){wilcox.test(as.formula(paste0(targetVar,' ~ Language '))
,filtered,subset = Operation == oper)$p.value
}
test=sapply(unique(filtered$Operation),w)
keep= names(which(test < 0.05))
data2 = filtered[filtered$Operation %in% keep,]
# #find which operation is isgnificant in the interactive terms
# form=as.formula(paste0(targetVar,' ~ Dataset*Operation*Language ')) #we need fukk interaction,
# model = lm(data=filtered, formula=form)
# modelS=summary(model)
# keep=  names(modelS$coefficients[,4])[modelS$coefficients[,4]<0.05]
# oper = unique(filtered$Operation)
# keep=oper[which(sapply(oper,function(x){any(grepl(x,keep,fixed=T))}))] #this does a grepl fo each operation in the significant variables
# data2 = filtered[filtered$Operation %in% keep,]
# print("Only Significant Elements")
if(nrow(data2)==0) {print("No Significant Elements") ; return()}
} else {
print("All Elements")
data2=filtered
}
p=  ggplot(data=data2, aes_string(x='Dataset',y=targetVar,color='Language')) +
ggplot2::stat_summary(aes(group=Language),fun.y=median,geom='line',size=.5 )+
#ggplot2::stat_summary(aes(group=Language),fun.y=median,geom='point',size=.5 )+
geom_jitter(alpha=0.5,size=.5,width=0.1)+
#scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#geom_boxplot(outlier.size = 0.1,size=0.1) +
#ggplot2::coord_flip() +
facet_wrap(~Operation,scales='free',ncol=4,labeller = label_wrap_gen())
#facet_grid(Operation~Setup,scales='free')
ggplot_colors(p,legend.position = 'bottom')
}
plot_operations(filtered,T)
plot_operations(filtered,F)
debugonce(plot_operations)
plot_operations(filtered,T)
test=sapply(unique(filtered$Operation),w)
keep= names(which(test < 0.05))
test
test
unique(filtered$Operation)
test=sapply(unique(filtered$Operation),w)
lapply(unique(filtered$Operation),w)
which(lapply(unique(filtered$Operation),w)<0.05)
which(sapply(unique(filtered$Operation),w)<0.05)
O
#functions
plot_operations = function(filtered,onlySignificant = T){
filtered$Operation = forcats::fct_reorder(filtered$Operation,filtered[[targetVar]],.fun=median,desc=F)
if(onlySignificant) {
w<-function(oper){wilcox.test(as.formula(paste0(targetVar,' ~ Language '))
,filtered,subset = Operation == oper)$p.value
}
ops = unique(filtered$Operation)
test=sapply(ops,w)
keep= ops[which(test < 0.05)]
data2 = filtered[filtered$Operation %in% keep,]
# #find which operation is isgnificant in the interactive terms
# form=as.formula(paste0(targetVar,' ~ Dataset*Operation*Language ')) #we need fukk interaction,
# model = lm(data=filtered, formula=form)
# modelS=summary(model)
# keep=  names(modelS$coefficients[,4])[modelS$coefficients[,4]<0.05]
# oper = unique(filtered$Operation)
# keep=oper[which(sapply(oper,function(x){any(grepl(x,keep,fixed=T))}))] #this does a grepl fo each operation in the significant variables
# data2 = filtered[filtered$Operation %in% keep,]
# print("Only Significant Elements")
if(nrow(data2)==0) {print("No Significant Elements") ; return()}
} else {
print("All Elements")
data2=filtered
}
p=  ggplot(data=data2, aes_string(x='Dataset',y=targetVar,color='Language')) +
ggplot2::stat_summary(aes(group=Language),fun.y=median,geom='line',size=.5 )+
#ggplot2::stat_summary(aes(group=Language),fun.y=median,geom='point',size=.5 )+
geom_jitter(alpha=0.5,size=.5,width=0.1)+
#scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#geom_boxplot(outlier.size = 0.1,size=0.1) +
#ggplot2::coord_flip() +
facet_wrap(~Operation,scales='free',ncol=4,labeller = label_wrap_gen())
#facet_grid(Operation~Setup,scales='free')
ggplot_colors(p,legend.position = 'bottom')
}
plot_operations(filtered,T)
filtered=merged_data %>% filter(Type=='Row Operation')
i
plot_operations(filtered,T)
files = list.files(path = "../Results/", pattern = ".csv$", recursive = TRUE, full.names = TRUE) # List all .csv files
files
View(merged_data)
filtered= merged_data
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
facet_grid(Type~Setup,scales='free',switch='y')
ggplot_colors(p,strip_angle=180)
filtered= merged_data
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
ggplot_colors(p,strip_angle=180)
filtered= merged_data %>% filter(Setup='Databricks')
filtered= merged_data %>% filter(Setup=='Databricks')
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
facet_wrap(~Type,scales='free',switch='y',labeller=label_wrap_gen(width=10))
ggplot_colors(p,strip_angle=180)
filtered= merged_data %>% filter(Setup=='Databricks')
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
facet_wrap(~Type,scales='free' ,labeller=label_wrap_gen(width=10))
ggplot_colors(p,strip_angle=0)
filtered= merged_data %>% filter(Setup=='Databricks')
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
facet_wrap(~Type,scales='free' ,labeller=label_wrap_gen(width=100))
ggplot_colors(p,strip_angle=0)
filtered= merged_data %>% filter(Setup=='Databricks')
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
#scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
facet_wrap(~Type,scales='free' ,labeller=label_wrap_gen(width=100))
ggplot_colors(p,strip_angle=0)
filtered= merged_data %>% filter(Setup=='Databricks')
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
facet_wrap(~Type  ,labeller=label_wrap_gen(width=100))
ggplot_colors(p,strip_angle=0)
filtered= merged_data %>% filter(Setup=='Databricks')
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
facet_wrap(~Type  ,labeller=label_wrap_gen(width=100))
ggplot_colors(p,strip_angle=0)
filtered= merged_data %>% filter(Setup=='VM')
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
facet_wrap(~Type  ,labeller=label_wrap_gen(width=100))
ggplot_colors(p,strip_angle=0)
filtered= merged_data %>% filter(Setup=='Local VM')
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
facet_wrap(~Type  ,labeller=label_wrap_gen(width=100))
ggplot_colors(p,strip_angle=0)
filtered= merged_data
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
facet_wrap(~Type  ,labeller=label_wrap_gen(width=100))
ggplot_colors(p,strip_angle=0)
filtered= merged_data
p=ggplot(data=filtered, aes_string(x='Dataset',y=targetVar,color='Language',fill='Language')) +
geom_boxplot(outlier.size = 0.1,size=0.1,outlier.shape=outliersShape) +
scale_y_continuous(limits = c(0, quantile(filtered[[targetVar]],probs=outliersQuantile))) +
#facet_grid(Type~Setup,scales='free',switch='y',labeller=label_wrap_gen(width=10))
facet_wrap(~Type  ,labeller=label_wrap_gen(width=100))
ggplot_colors(p,strip_angle=0)
